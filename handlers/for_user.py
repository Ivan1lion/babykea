from aiogram import F, Router, types, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto, PreCheckoutQuery, ContentType, SuccessfulPayment
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.methods.delete_message import DeleteMessage

from sqlalchemy.ext.asyncio import AsyncSession

import handlers.keyboards as kb
from handlers.pay import order
from database.orm_query import orm_user_request, orm_add_user

for_user_router = Router()


# –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–ï–ù–Æ
@for_user_router.message(Command("policy"))
async def policy_cmd(message: Message):
    await message.answer("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")


@for_user_router.message(Command("help"))
async def policy_cmd(message: Message):
    await message.answer(f"–ï—Å–ª–∏ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –≤–∞–º–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ "
                         f"–¥–∏—Å—Ç—Ä–µ–±—å—é—Ç–æ—Ä–∞ –≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–º –æ–±—Ä–∞–∑–æ–º (—Ö–∞–º–∏–ª–∏, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã), "
                         f"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —ç—Ç–æ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ\n"
                         f"\n<a href='http://www.Babykea.ru/'>Babykea.ru</a>\n"
                         f"\n–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º. –†–∞–∑–±–µ—Ä–µ–º—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤ —Å–ª—É—á–∞–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥—Ä—É–±–æ–≥–æ –æ–±—â–µ–Ω–∏—è "
                         f"–∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")


@for_user_router.message(Command("info"))
async def info_cmd(message: Message):
    info_text = (f"–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ 87 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç "
                 f"–∫–∞–∫ –Ω–∞–¥–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞ –í–∞—à–∏ –¥–µ–Ω—å–≥–∏. –í—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ —è—Å–Ω–æ")
    await message.answer(text=info_text)


@for_user_router.message(Command("offer"))
async def offer_cmd(message: Message):
    await message.answer("–û—Ñ–µ—Ä—Ç–∞")


@for_user_router.message(Command("disclaimer"))
async def disclaimer_cmd(message: Message):
    await message.answer("–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")


@for_user_router.message(Command("company"))
async def company_cmd(message: Message):
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π")


# –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM)
class UserRequest(StatesGroup):
    get_photo1 = State()
    get_photo2 = State()
    get_photo3 = State()
    get_comments = State()


@for_user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state:
        await state.clear()

    await orm_add_user(message.from_user.username)
    file = FSInputFile("./mediafile_for_bot/1_zapchasti.jpg")
    string = (f"‚ùóÔ∏è –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –≤–∞–º –∑–∞–ø—á–∞—Å—Ç–µ–π –∑–∞–≥—Ä—É–∑–∏—Ç–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n"
              f"\n<b><u>–§–æ—Ç–æ ‚Ññ1</u></b> - –û–±—â–∏–π –≤–∏–¥ –∫–æ–ª—è—Å–∫–∏ (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∞ –∫–æ–ª—è—Å–∫–∏)\n"
              f"\n<b><u>–§–æ—Ç–æ ‚Ññ2</u></b> - –§–æ—Ç–æ –ø–æ–ª–æ–º–∞–Ω–Ω–æ–π (–Ω–µ —Ä–∞–±–æ—á–µ–π) –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª—è—Å–∫–∏\n"
              f"\n<b><u>–§–æ—Ç–æ ‚Ññ3</u></b> - –§–æ—Ç–æ —Ç–æ–π –∂–µ –¥–µ—Ç–∞–ª–∏ (—É–∑–ª–∞, —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª—è—Å–∫–∏), –Ω–æ —Å –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ "
              f"–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã\n"
              f"\n\n*—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–∑—É –∏–∑ –±–æ—Ç–∞ (–∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ)")
    await message.answer_photo(photo=file, caption=string,
                               reply_markup=kb.start_photo)


# —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞ ‚Ññ1-3 –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

photo_dict = []

@for_user_router.callback_query(StateFilter(None), F.data == "start_photo")
async def cmd_get_photo(callback: CallbackQuery, state: FSMContext):
    file = FSInputFile("./mediafile_for_bot/1_zapchasti.jpg")
    string = (f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤ –ë–û–¢ —Ñ–æ—Ç–æ –æ–±—â–µ–≥–æ –≤–∏–¥–∞ –∫–æ–ª—è—Å–∫–∏\n"
              f"\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, —Å–¥–µ–ª–∞–π—Ç–µ –û–î–ò–ù —Å–Ω–∏–º–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ")
    await callback.answer()
    await callback.message.answer_photo(photo=file, caption=string)
    await state.set_state(UserRequest.get_photo1)


@for_user_router.message(StateFilter(None))
async def cmd_get_photo(message: Message, state: FSMContext):
    if message.from_user.is_bot:
        return
    await message.delete()
    await message.answer(text="–ù—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ‚§¥Ô∏è")


@for_user_router.message(UserRequest.get_photo1, F.photo)
async def get_photo1(message: Message, state: FSMContext):
    if message.media_group_id is not None:
        await message.delete()
        return

    file = FSInputFile("./mediafile_for_bot/1_zapchasti.jpg")
    string = (f"–û—Ç–ª–∏—á–Ω–æ üëå\n"
              f"\n–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–ª–æ–º–∞–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏. –ò–ª–∏ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ —É–∑–ª–∞ (–µ—Å–ª–∏ —è–≤–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –≤–∏–¥–Ω–æ)\n"
              f"\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–æ–¥–≤–∏–Ω—å—Ç–µ —Ç–µ–∫—Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å –≤–∏–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å")
    await state.update_data(get_photo1=message.photo[-1].file_id)
    await message.answer_photo(photo=file, caption=string)
    await state.set_state(UserRequest.get_photo2)
    photo_data_1 = message.photo[-1]
    photo_dict.append(photo_data_1.file_id)


@for_user_router.message(UserRequest.get_photo1)
async def get_photo1(message: Message, state: FSMContext):
    await message.delete()


@for_user_router.message(UserRequest.get_photo2, F.photo)
async def get_photo2(message: Message, state: FSMContext):
    if message.media_group_id is not None:
        await message.delete()
        return

    file = FSInputFile("./mediafile_for_bot/1_zapchasti.jpg")
    string = (f"üëç\n"
              f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ —ç—Ç–æ–π–∂–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —É–∑–ª–∞, –Ω–æ —Å –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞")
    await state.update_data(get_photo2=message.photo[-1].file_id)
    await message.answer_photo(photo=file, caption=string)
    await state.set_state(UserRequest.get_photo3)
    photo_data_2 = message.photo[-1]
    photo_dict.append(photo_data_2.file_id)


@for_user_router.message(UserRequest.get_photo2)
async def get_photo1(message: Message, state: FSMContext):
    await message.delete()


@for_user_router.message(UserRequest.get_photo3, F.photo)
async def get_photo3(message: Message, state: FSMContext):
    if message.media_group_id is not None:
        await message.delete()
        return

    file = FSInputFile("./mediafile_for_bot/1_zapchasti.jpg")
    string = (f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n"
              f"\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π-–ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
              f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
    await state.update_data(get_photo3=message.photo[-1].file_id)
    await message.answer_photo(photo=file, caption=string,
                               reply_markup=kb.no_commens)
    await state.set_state(UserRequest.get_comments)
    photo_data_3 = message.photo[-1]
    photo_dict.append(photo_data_3.file_id)


@for_user_router.message(UserRequest.get_photo3)
async def get_photo1(message: Message, state: FSMContext):
    await message.delete()


@for_user_router.message(UserRequest.get_comments, F.text)
async def get_comments(message: Message, state: FSMContext):
    string = (f"<b><u>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</u></b>\n"
              f"\n<blockquote>{message.text}</blockquote>")
    await state.update_data(get_comments=message.text)

    album = []

    album.append(InputMediaPhoto(media=photo_dict[0]))
    album.append(InputMediaPhoto(media=photo_dict[1]))
    album.append(InputMediaPhoto(media=photo_dict[-1], caption=string))

    await message.answer_media_group(media=album)
    await message.answer(text=(f"üëÜ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ 87 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n"
              f"\n–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Å—Ç—Ä–µ–±—å—é—Ç–æ—Ä—ã, —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —á–∞—Å—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã "
              f"–∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –∫–æ–ª—è—Å–æ–∫"), reply_markup=kb.finish)


@for_user_router.callback_query(UserRequest.get_comments, F.data == "no_commens")
async def keyboards_no_commens(callback: CallbackQuery, state: FSMContext, session: AsyncSession()):
    string = (f"<b><u>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</u></b>\n"
              f"\n(<i>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>)")
    await state.update_data(get_comments="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    await callback.answer()

    album = []

    album.append(InputMediaPhoto(media=photo_dict[0]))
    album.append(InputMediaPhoto(media=photo_dict[1]))
    album.append(InputMediaPhoto(media=photo_dict[-1], caption=string))

    await callback.message.answer_media_group(media=album)
    await callback.message.answer(text=(f"üëÜ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ 87 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n"
              f"\n–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Å—Ç—Ä–µ–±—å—é—Ç–æ—Ä—ã, —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —á–∞—Å—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã "
              f"–∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –∫–æ–ª—è—Å–æ–∫"), reply_markup=kb.finish)


@for_user_router.message(UserRequest.get_comments)
async def get_photo1(message: Message, state: FSMContext):
    await message.delete()


# –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
@for_user_router.callback_query(StateFilter("*"), F.data == "clear")
async def clear_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.clear()
    await callback.message.answer(text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω ‚ùå\n"
                                       f"\n–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n"
                                       f"–ú–ï–ù–Æ -> –ù–ê–ô–¢–ò –ó–ê–ü–ß–ê–°–¢–¨")



@for_user_router.message(StateFilter("*"))
async def get_photo1(message: Message, state: FSMContext):
    await message.delete()


############# –û–ø–ª–∞—Ç–∞ #############
@for_user_router.callback_query(StateFilter("*"), F.data == "get_search")
async def get_search_handler(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await order(callback.message, bot)


@for_user_router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@for_user_router.message(F.content_types == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    await bot.send_message(message.chat.id, f"Thanks! Payment was successful, id: {message.successful_payment.provider_payment_charge_id}")
    data = await state.get_data()
    user_name = message.from_user.username
    await orm_user_request(session,user_name, data)
    await message.answer(text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
                                       f"\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 24 —á–∞—Å–∞")
    await state.clear()




# @for_user_router.callback_query(StateFilter("*"), F.data == "get_search")
# async def clear_handler(callback: CallbackQuery, state: FSMContext, session: AsyncSession()):
#     data = await state.get_data()
#     user_name = callback.from_user.username
#     await orm_user_request(session,user_name, data)
#     await callback.answer()
#     await callback.message.answer(text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
#                                        f"\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 24 —á–∞—Å–∞")
#     await state.clear()





